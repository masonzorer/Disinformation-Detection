# Retrieve data from the database for training

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))
from pymongo import MongoClient
from dotenv import load_dotenv
import os
from pymongo.server_api import ServerApi
import database
import pandas

def setup():
    # Get the data from the database and convert it to a pandas dataframe.
    cnx = database.connect("Disinformation")
    tweets = database.get_all_statement(cnx, 'SELECT text, label FROM LabeledTweets WHERE label like "Disinformation" or label like "Misinformation" or label like "Satire/Joke" or label like "None" ORDER BY RAND()', "")
    train_df_sql = pandas.DataFrame(tweets, columns =['text', 'label'])

    # pull the data from mongodb
    load_dotenv()
    connection_string = os.getenv("MongoDB_CONNECTION_STRING")
    client = MongoClient(connection_string, server_api=ServerApi('1'))
    collection = client['Disinformation']["Labeled Data"]
    raw_mongo_data = list(collection.find())

    # Handle the data generated by gpt on mongodb by removing everything but text
    for data in raw_mongo_data:
        # check if the text of the entry contains {'id':
        if "{'id':" in str(data['text']):
            temp = str(data['text']).split("'content':")[1]
            final_string = temp.split("},")[0]
            data['text'] = final_string

    train_df_mongo = pandas.DataFrame(raw_mongo_data)
    train_df_mongo = train_df_mongo.drop(columns=['_id'])
    # drop the rows that have unknown labels
    train_df_mongo = train_df_mongo[train_df_mongo.label != "Unknown"]

    # combine the data from the two sources
    train_df = pandas.concat([train_df_sql, train_df_mongo], ignore_index=True)
    print(f"Total Datapoints: {train_df.shape[0]}")
    # print sum of each label
    print(train_df['label'].value_counts())

    # convert the labels to int value 0-3
    train_df['label'] = train_df['label'].replace(['Disinformation', 'Misinformation', 'Satire/Joke', 'None'], [0, 1, 2, 3])

    return train_df

def main():
    train_df = setup()
    #print(train_df)

if __name__ == "__main__":
    main()